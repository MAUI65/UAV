# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/api/20_mavlink.cam_client_server.ipynb.

# %% auto 0
__all__ = ['CamClient', 'CamServer', 'test_cam_client_server']

# %% ../../nbs/api/20_mavlink.cam_client_server.ipynb 7
from .base import MavLinkBase , UAV_SYSTEM_VEHICLE_ID, UAV_SYSTEM_GCS_CLIENT_ID, mavutil 

# from UAV.imports import *   # TODO why is this relative import on nbdev_export?


# %% ../../nbs/api/20_mavlink.cam_client_server.ipynb 11
class CamClient(MavLinkBase):
 
    def __init__(self, connection_string, # "udpin:localhost:14550"
                 baudrate=57600, #baud rate of the serial port
                 mav_type=mavutil.mavlink.MAV_TYPE_GCS, # type used in heartbeat
                 server_system_ID=UAV_SYSTEM_VEHICLE_ID,  # remote or air uav system   1 = vehicle
                 client_system_ID=UAV_SYSTEM_GCS_CLIENT_ID,  # GCS system   255 = GCS
                 debug=False, # logging level
                 ):    
        super(CamClient, self).__init__( connection_string = connection_string,
                baudrate=baudrate, #baud rate of the serial port
                server_system_ID= server_system_ID,  # remote or air uav system   1 = vehicle
                client_system_ID= client_system_ID,  # GCS system   255 = GCS
                debug=debug, # logging level                   
                )
        self.client(mav_type=mav_type) # run as client

    def trigger_camera(self, camera_id:int=1): # camera id (0 for all cams)
        """
        Use MAV_CMD_DO_DIGICAM_CONTROL to trigger a camera 
        """
        self.send_command(mavutil.mavlink.MAV_CMD_DO_DIGICAM_CONTROL, 
                          [camera_id,  # param1 (session)  or cam # (0 for all cams)
                           1,  # param2 (trigger capture)
                           0,  # param3 (zoom pos)
                           0,  # param4 (zoom step)
                           0,  # param5 (focus lock)
                           0,  # param6 (shot ID)
                           0,  # param7 (command ID)
                          ])
        self.wait_ack(mavutil.mavlink.MAV_CMD_DO_DIGICAM_CONTROL)
        self.log.info("Camera triggered")
        
        
class CamServer(MavLinkBase):
    def __init__(self, connection_string, # "udpin:localhost:14550"
             baudrate=57600, #baud rate of the serial port
             mav_type=mavutil.mavlink.MAV_TYPE_CAMERA, # type used in heartbeat
             server_system_ID=UAV_SYSTEM_VEHICLE_ID,  # remote or air uav system   1 = vehicle
             client_system_ID=UAV_SYSTEM_GCS_CLIENT_ID,  # GCS system   255 = GCS
             debug=False, # logging level
             ):    
        super(CamServer, self).__init__( connection_string = connection_string,
                baudrate=baudrate, #baud rate of the serial port
                server_system_ID= server_system_ID,  # remote or air uav system   1 = vehicle
                client_system_ID= client_system_ID,  # GCS system   255 = GCS
                debug=debug, # logging level
                )
        self.num_commands_received = 0
        self.num_acks_received = 0
        self.server(mav_type=mav_type) # run as server

def test_cam_client_server():
    from fastcore.test import test_eq
    with CamClient("udpin:localhost:14445", debug=False) as client:
        with CamServer("udpout:localhost:14445", debug=False) as server:
            client.wait_heartbeat()

            for i in range(5):
                client.trigger_camera(2)
                server._test_command(2)

    print()
    print(f"server sys: {server.source_system};  msgs: {server.message_cnts}")
    print(f"client sys: {client.source_system};  msgs: {client.message_cnts}")

    test_eq(server.server_system_ID, server.source_system)
    test_eq(client.client_system_ID, client.source_system)
    test_eq(client.num_commands_sent, server.num_commands_received)
    test_eq(client.num_acks_received, server.num_commands_received)
    test_eq(server.message_cnts[222]['COMMAND_LONG'], client.message_cnts[111]['COMMAND_ACK'])
    assert client.message_cnts[111]['HEARTBEAT'] >= 1
    
#test_cam_client_server()
