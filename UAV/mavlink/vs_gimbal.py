# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/api/22_mavlink.viewsheen_gimbal.ipynb.

# %% auto 0
__all__ = ['NAN', 'GIMBAL_DEVICE_SET_ATTITUDE', 'GIMBAL_MANAGER_SET_MANUAL_CONTROL', 'MAV_CMD_SET_CAMERA_ZOOM',
           'MAV_CMD_IMAGE_START_CAPTURE', 'MAV_CMD_IMAGE_STOP_CAPTURE', 'GimbalClient', 'GimbalServer']

# %% ../../nbs/api/22_mavlink.viewsheen_gimbal.ipynb 7
import time, os, sys

from ..logging import logging
from .mavcom import MAVCom
from .component import Component, mavutil
from viewsheen_sdk.gimbal_cntrl import pan_tilt, snapshot,  zoom, VS_IP_ADDRESS, VS_PORT, KeyReleaseThread
import socket

# from UAV.imports import *   # TODO why is this relative import on nbdev_export?


# %% ../../nbs/api/22_mavlink.viewsheen_gimbal.ipynb 14
# from pymavlink.dialects.v20 import ardupilotmega as mav
from pymavlink.dialects.v20.ardupilotmega import MAVLink

NAN = float("nan")
GIMBAL_DEVICE_SET_ATTITUDE = 284  # https://mavlink.io/en/messages/common
GIMBAL_MANAGER_SET_MANUAL_CONTROL = 288  # https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_MANUAL_CONTROL
MAV_CMD_SET_CAMERA_ZOOM = 531  # https://mavlink.io/en/messages/common.html#MAV_CMD_SET_CAMERA_ZOOM
MAV_CMD_IMAGE_START_CAPTURE = 2000  # https://mavlink.io/en/messages/common.html#MAV_CMD_IMAGE_START_CAPTURE
MAV_CMD_IMAGE_STOP_CAPTURE = 2001  # https://mavlink.io/en/messages/common.html#MAV_CMD_IMAGE_STOP_CAPTURE
class GimbalClient(Component):
    """Create a Viewsheen mavlink gimbal client component for send commands to a gimbal on a companion computer or GCS """

    def __init__(self, mav_connection,  # MavLinkBase connection
                 source_component,  # used for component indication
                 mav_type,  # used for heartbeat MAV_TYPE indication
                 debug):  # logging level
        
        super().__init__(mav_connection=mav_connection, source_component=source_component, mav_type=mav_type, debug=debug)
        # self.gimbal_target_component = None
        # self.camera_target_component = None
        
    def send_message(self, msg):
        """Send a message to the gimbal"""
        self.master.mav.send(msg)
        self.log.debug(f"Sent {msg}")
        
    # def set_target(self, target_system, gimbal_comp = None,  camera_comp = None):
    #     """Set the target system and component for the gimbal / camera"""
    #     self.target_system = target_system
    #     self.gimbal_target_component = gimbal_comp
    #     self.camera_target_component = camera_comp
    

    def set_attitude(self, pitch, yaw, pitchspeed, yawspeed):
        """Set the attitude of the gimbal"""
        # https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_SET_ATTITUDE
        # https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_FLAGS
        flags = 0

        q = [1, 0, pitch, yaw]
        angular_velocity_x, angular_velocity_y, angular_velocity_z = 0, pitchspeed, yawspeed

        
        # self.mav.gimbal_manager_set_attitude_send(
        #     self.target_system, self.target_component,
        #     flags,
        #     0, # gimbal_device_id , 0=all gimbal components
        #     q,
        #     angular_velocity_x, angular_velocity_y, angular_velocity_z,
        # )

        self.mav.gimbal_device_set_attitude_send(
            self.target_system, self.target_component,
            flags,
            q,
            angular_velocity_x, angular_velocity_y, angular_velocity_z,
        )   
    
    def set_zoom(self, value):
        """ Set the camera zoom"""
        # https://mavlink.io/en/messages/common.html#MAV_CMD_SET_CAMERA_ZOOM
        t = self.send_command(self.target_system, self.target_component,
        MAV_CMD_SET_CAMERA_ZOOM,
        [0,
         value, 0,0,0,0,0])
    
    def start_capture(self):
        """Start image capture sequence."""
        # https://mavlink.io/en/messages/common.html#MAV_CMD_IMAGE_START_CAPTURE
        t = self.send_command(self.target_system, self.target_component,
        MAV_CMD_IMAGE_START_CAPTURE,
        [0,
         0, # interval
         1, # number of  images to capture
         0, # Sequence number starting from 1. This is only valid for single-capture (param3 == 1), otherwise set to 0.  Increment the capture ID for each capture command to prevent double captures when a command is re-transmitted.
         NAN, # Reserved
         NAN, # Reserved
         NAN]) # Reserved
    
    def stop_capture(self):
        """Stop image capture sequence"""
        # https://mavlink.io/en/messages/common.html#MAV_CMD_IMAGE_STOP_CAPTURE
        t = self.send_command(self.target_system, self.target_component,
        MAV_CMD_IMAGE_STOP_CAPTURE,
        [0, NAN, NAN, NAN, NAN, NAN, NAN])


# %% ../../nbs/api/22_mavlink.viewsheen_gimbal.ipynb 16
class GimbalServer(Component):
    """Create a Viewsheen mavlink Camera Server Component for receiving commands from a gimbal on a companion computer or GCS"""

    def __init__(self, mav_connection,  # MavLinkBase connection
                 source_component,  # used for component indication
                 mav_type,  # used for heartbeat MAV_TYPE indication
                 debug):  # logging level
        
        super().__init__(mav_connection=mav_connection, source_component=source_component, mav_type=mav_type, debug=debug)
        
        self.set_message_callback(self.on_message)
        self.connect()
     
     
    def connect(self):
        """Connect to the viewsheen_sdk gimbal"""
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((VS_IP_ADDRESS, VS_PORT))
        self.log.debug(f"Connected to gimbal")
        return True
    
    def on_message(self, msg):
        """Callback for a command received from the gimbal"""
        # https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_SET_ATTITUDE
        # print(f" {msg = }")
        # print(f" {msg.get_type() = }")
        # return False
        if msg.get_type() == "GIMBAL_DEVICE_SET_ATTITUDE" or msg.get_type() == "GIMBAL_MANAGER_SET_ATTITUDE":
            self.set_attitude(msg)
            return False
        elif msg.get_type() == "COMMAND_LONG":
            # print(f"Command  {msg.command = } ")
            if msg.command == MAV_CMD_SET_CAMERA_ZOOM:
                # self.log.info(f"***** Zoom {msg}")
                # print(f"Zoom {msg.param2 = }")
                self.set_zoom(msg)
                return True
            elif msg.command == MAV_CMD_IMAGE_START_CAPTURE:
                self.start_capture()
                return True
            elif msg.command == MAV_CMD_IMAGE_STOP_CAPTURE:
                self.stop_capture()
                return True
            
        else:
            self.log.debug(f"Unknown command {msg.get_type()} received from {msg.get_srcSystem()}/{msg.get_srcComponent()}")
            return False
        
    def set_zoom(self, msg):
        """ Set the viewsheen camera zoom """
        # print(msg.get_type())
        # print(f"Zoom {msg.param2 = }")
        data = zoom(int(msg.param2))
        self.sock.sendall(data)
        
        
    def start_capture(self):
        """Start image capture sequence."""
        # https://mavlink.io/en/messages/common.html#MAV_CMD_IMAGE_START_CAPTURE
        data = snapshot(1, 0)
        self.sock.sendall(data)

        
    def set_attitude(self, msg):
        """Set the attitude of the gimbal"""
        # https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_SET_ATTITUDE
   
        pitch, yaw = msg.q[2], msg.q[3]
        pitchspeed, yawspeed = msg.angular_velocity_y, msg.angular_velocity_z
        pan = int(yawspeed * 100)
        tilt = int(pitchspeed * 100)
        data = pan_tilt(pan, tilt)
        self.sock.sendall(data)
        
    def close(self):
        """Close the connection to the gimbal"""
        super().close()
        self.sock.close()
        self.log.debug(f"Closed connection to gimbal")
        return True

